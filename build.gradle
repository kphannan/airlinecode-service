
buildscript {
    ext {
        // --- Languages / framworks
        lombokVersion              = '1.18.22'
        apacheLangVersion          = '3.12.0'
        hibernateValidatorVersion  = '7.0.2.Final'
        jacksonVersion             = '2.10.1'

        // --- Testing ---
        // --- unit testing
        junitVersion               = '5.8.2'
        hamcrestVersion            = '2.2'
        serenityVersion            = '2.0.83'
        cucumberReportsVersion     = '4.11.2'


        // ===== Quality checks =====
        // --- Coding practies (static analysis) ---
        // --- Coding style
        checkstyleVersion          = '9.0.1'
        // --- Common Coding flaws
        pmdVersion                 = '6.41.0'

        // --- Testing ---
        // Unit testing
        junitVersion               = '5.8.2'
        // --- Code coverage
        pitVersion                 = '1.7.3'

        // --- Documentation ---
        asciiDoctorVersion         = '1.5.6'
    }

    repositories {
        mavenLocal()
    }

    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:${serenityVersion}")
        classpath 'be.jlr-home.gradle:plantumlPlugin:0.1.+'
    }
}

plugins {
    // --- Artifact
    id 'java'

    // --- annotation processors
    // id "io.freefair.lombok" version "6.3.0"
    // id "io.freefair.lombok"

    // ===== Frameworks =====
    // --- Spring boot
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'


    // ===== Quality Assurance =====
    // --- Static Analysis
    // --- PMD
    id 'pmd'
    // --- Style
    id 'checkstyle'
    // --- Coverage
    id 'jacoco'
    // --- Mutation testing
    // id 'info.solidsoft.pitest' version '1.7.0'
    // id 'info.solidsoft.pitest'


    // ===== Configuration Management =====
    // id "net.nemerosa.versioning" version "2.9.0"
    // id "com.gorylenko.gradle-git-properties" version "2.3.2"
    // id 'maven-publish'

    // ===== Documentation =====
    // id 'org.asciidoctor.convert' version '1.5.8'
    // id 'org.asciidoctor.convert'

    id 'project-report'
    id 'build-dashboard'
    // id 'net.serenity-bdd.aggregator' version "${serenityVersion}"

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set( 'snippetsDir', file( "build/generated-snippets" ) )
    set( 'springCloudVersion', "2021.0.0" )
}

dependencies {
    implementation project( ":airline-core" )



    // ===== Frameworks =====
    // --- Spring boot
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'

    // --- Traceability
    // implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    // implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'

    // implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // --- Instrumentation
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'


    // ===== Persistence =====
    // implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    // --- Database
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'com.h2database:h2'
    // runtimeOnly 'org.postgresql:postgresql'

    // ===== partner services =====

    // implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // --- Stability
    // implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // --- REST
    // --- SOAP
    // --- Metrics


    // ===== Language Support =====
    // --- Lombok
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")


    // ===== Quality Assurance =====
    // --- Static Analysis
    // --- PMD
    // --- Style
    implementation( "com.puppycrawl.tools:checkstyle:${checkstyleVersion}" )
    // --- Unit testing
    testImplementation( "org.junit.jupiter:junit-jupiter-api:${junitVersion}" )
    testRuntimeOnly( "org.junit.jupiter:junit-jupiter-engine:${junitVersion}" )
    testImplementation( "org.hamcrest:hamcrest:${hamcrestVersion}" )
    // --- Coverage
    // --- Mutation testing
    testRuntimeOnly( 'org.pitest:pitest-junit5-plugin:0.15' )
    // --- Reporting
    // testImplementation( "net.serenity-bdd:serenity-core:${serenityVersion}" )
    // testImplementation( "net.serenity-bdd:serenity-junit:${serenityVersion}" )
    testImplementation( "net.masterthought:cucumber-reporting:${cucumberReportsVersion}" )

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()

    jacoco {
        excludes = [ '**/AirlineCodeApplication' ]
    }
}

// asciidoctor {
//   inputs.dir snippetsDir
//   dependsOn test
// }







// ===== Static Code Analysis =====
// --- Coverage (Jacoco) ---
// See this page for options https://reflectoring.io/jacoco/
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 0.75
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}


// ----- Checkstyle -----
checkstyle {
    showViolations = false
    toolVersion = "${checkstyleVersion}"
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}


// [checkstyleMain, checkstyleTest] {
//     source = 'src/${sourceSet.name}/java'
// }

checkstyleMain {
    source = 'src/main/java'
    // source = 'src/${sourceSet.name}/${sourceSet.name.name}'
    // sourceSets = [sourceSets.main.srcDirs]
}

checkstyleTest {
    source = 'src/test/java'
    // source = 'src/${sourceSet.name}/java'
    // source = '${sourceSet.name.java.srcDir}'
}


// ----- PMD -----
pmd {
    consoleOutput = false
    ignoreFailures = true       // Don't interrupt the build
    toolVersion = "${pmdVersion}"
    ruleSetFiles = files("${rootDir}/config/pmd/pmd.xml")
    ruleSets = []
}

// --- Mutation Tests
// pitest {
//     verbose = false
//     testSourceSets = [sourceSets.test]
//     mainSourceSets = [sourceSets.main]
//     // targetClasses = ['com.example.security.*']  //by default "${project.group}.*"
//     pitestVersion = "${pitVersion}" //not needed when a default PIT version should be used
//     threads = 4
//     outputFormats = ['XML', 'HTML']
//     timestampedReports = false
//     withHistory = true
//     // mutators = ['DEFAULTS', 'STRONGER', 'ALL']
//     mutators = ['DEFAULTS', 'STRONGER' ]
// }



// ===== Documentation =====
// asciidoctor {
// 	sourceDir 'src/main/asciidoc'
// 	attributes \
// 		'snippets': file('target/snippets')
//     // resources 'doc'
// }

// plantuml {
//     sourcePath = 'doc'
// }
